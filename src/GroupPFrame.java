/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Group 2
 */

import Classes.JobManager;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;

public class GroupPFrame extends javax.swing.JFrame {

    public static String QueryfilePath;
    public static String existingFolderPath; // Declaring the variable that will save the existing project path 
    public static JTextArea textarea;
    static String reffilename2;
    DefaultTreeModel model; // Declaring an instance used to manage the data in the project tree 
    DefaultMutableTreeNode mainRoot = new DefaultMutableTreeNode("Project list:"); // Creating the main root of the project tree  
    DefaultMutableTreeNode node = new DefaultMutableTreeNode();
    //public static JPanel jPanel4;
    JPanel startpanel = new JPanel();
    MainPage mainpage = new MainPage();
    static boolean nucmerran;

    /**
     * Creates new form NewJFrame
     */
    public GroupPFrame() {
        initComponents();
        NewProject.setEnabled(false);
        model = (DefaultTreeModel) jTree1.getModel(); // Retrieving the tree model so that it can be updated 
        model.setRoot(mainRoot); // Setting or replacing the main root of the tree model
        jTree1.setModel(model); // Setting the updated tree model back into the JTree component  
        Analysis.setEnabled(false);
        plotBUSCO.setEnabled(false);
        RunMummer.setEnabled(false);
        nucmerran = false;
        AddFileToProject.setEnabled(false);
        startpanel.setName("Start Page");
        startpanel.setVisible(true);
        startpanel.add(mainpage);
        jTabbedPane1.add(startpanel);
        jTabbedPane1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                int index = jTabbedPane1.getSelectedIndex();
                if (index != 0) {
                    JPopupMenu popupMenu = new JPopupMenu();
                    JMenuItem delete = new JMenuItem("Delete");
                    delete.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {

                            jTabbedPane1.remove(index);
                        }
                    });
                    popupMenu.add(delete);
                    popupMenu.show(jPanel4, e.getX(), e.getY() - 40);

                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    // Creates a new instance of the QueryFastaChrNoInputs class as a modal dialog, with this component as the parent
    // This dialog allows the user to input data for genome comparison, and must be completed before the program can continue
    //QueryFastaChrNoInputs QIn = new QueryFastaChrNoInputs(this, true);
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        statustab = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        activestatus = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        finishedstatus = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        incompletestatus = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        messagestatus = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Project = new javax.swing.JMenu();
        NewProject = new javax.swing.JMenuItem();
        OpenProject = new javax.swing.JMenuItem();
        SaveProject = new javax.swing.JMenuItem();
        SaveProjectas = new javax.swing.JMenuItem();
        AddFileToProject = new javax.swing.JMenuItem();
        CloseProject = new javax.swing.JMenuItem();
        Analysis = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        statsBUSCO = new javax.swing.JMenuItem();
        plotBUSCO = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        RunRef = new javax.swing.JMenuItem();
        RunDelta = new javax.swing.JMenuItem();
        RunMummer = new javax.swing.JMenuItem();
        HiC = new javax.swing.JMenuItem();
        GeneDensity = new javax.swing.JMenuItem();
        Server = new javax.swing.JMenu();
        ConfigureServer = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(255, 204, 204));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Projects"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        statustab.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        statustab.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        activestatus.setEditable(false);
        activestatus.setColumns(20);
        activestatus.setRows(5);
        DefaultCaret caret = (DefaultCaret)activestatus.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane2.setViewportView(activestatus);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        statustab.addTab("Active", jPanel5);

        finishedstatus.setEditable(false);
        finishedstatus.setColumns(20);
        finishedstatus.setRows(5);
        DefaultCaret caretF = (DefaultCaret)finishedstatus.getCaret();
        caretF.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane6.setViewportView(finishedstatus);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        statustab.addTab("Finished", jPanel6);

        incompletestatus.setEditable(false);
        incompletestatus.setColumns(20);
        incompletestatus.setRows(5);
        DefaultCaret caretI = (DefaultCaret)incompletestatus.getCaret();
        caretI.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane7.setViewportView(incompletestatus);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        statustab.addTab("Incomplete", jPanel7);

        messagestatus.setEditable(false);
        messagestatus.setColumns(20);
        messagestatus.setRows(5);
        DefaultCaret caretM = (DefaultCaret)messagestatus.getCaret();
        caretM.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane8.setViewportView(messagestatus);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        statustab.addTab("Messages", jPanel8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statustab))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statustab, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("jLabel1");

        jMenuBar1.setBackground(new java.awt.Color(255, 51, 0));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 51, 0), null, null));

        Project.setBackground(new java.awt.Color(204, 255, 204));
        Project.setText("Project");

        NewProject.setBackground(new java.awt.Color(204, 255, 204));
        NewProject.setText("New");
        NewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewProjectActionPerformed(evt);
            }
        });
        Project.add(NewProject);

        OpenProject.setBackground(new java.awt.Color(204, 255, 204));
        OpenProject.setText("Open");
        OpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenProjectActionPerformed(evt);
            }
        });
        Project.add(OpenProject);

        SaveProject.setBackground(new java.awt.Color(204, 255, 204));
        SaveProject.setText("Save");
        SaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveProjectActionPerformed(evt);
            }
        });
        Project.add(SaveProject);

        SaveProjectas.setBackground(new java.awt.Color(204, 255, 204));
        SaveProjectas.setText("Save as");
        Project.add(SaveProjectas);

        AddFileToProject.setBackground(new java.awt.Color(204, 255, 204));
        AddFileToProject.setText("Add File");
        AddFileToProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFileToProjectActionPerformed(evt);
            }
        });
        Project.add(AddFileToProject);

        CloseProject.setBackground(new java.awt.Color(204, 255, 204));
        CloseProject.setText("Close");
        CloseProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseProjectActionPerformed(evt);
            }
        });
        Project.add(CloseProject);

        jMenuBar1.add(Project);

        Analysis.setText("Analysis");
        Analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisActionPerformed(evt);
            }
        });

        jMenu2.setText("Basic Stats");

        statsBUSCO.setText("Stats and BUSCO");
        statsBUSCO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsBUSCOActionPerformed(evt);
            }
        });
        jMenu2.add(statsBUSCO);

        plotBUSCO.setText("Plot BUSCO");
        plotBUSCO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotBUSCOActionPerformed(evt);
            }
        });
        jMenu2.add(plotBUSCO);

        Analysis.add(jMenu2);

        jMenu4.setText("Genome Comparison");

        RunRef.setText("Reference file");
        RunRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunRefActionPerformed(evt);
            }
        });
        jMenu4.add(RunRef);

        RunDelta.setText("Delta file");
        RunDelta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunDeltaActionPerformed(evt);
            }
        });
        jMenu4.add(RunDelta);

        RunMummer.setText("Plot comparison graph");
        RunMummer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunMummerActionPerformed(evt);
            }
        });
        jMenu4.add(RunMummer);

        Analysis.add(jMenu4);

        HiC.setText("Hi-C");
        HiC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HiCActionPerformed(evt);
            }
        });
        Analysis.add(HiC);

        GeneDensity.setText("Genome Comparison + Hi-C + Gene Density");
        GeneDensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneDensityActionPerformed(evt);
            }
        });
        Analysis.add(GeneDensity);

        jMenuBar1.add(Analysis);

        Server.setText("Server");

        ConfigureServer.setText("Configure");
        ConfigureServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigureServerActionPerformed(evt);
            }
        });
        Server.add(ConfigureServer);

        jMenuBar1.add(Server);

        View.setText("View");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Projects");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        View.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Status");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        View.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("Start Page");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        View.add(jCheckBoxMenuItem3);

        jMenuBar1.add(View);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void enableNew() {
        NewProject.setEnabled(true);
    }

    private void NewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewProjectActionPerformed
        //JFileChooser dialog box is displayed to select the directory where the new folder will be created
        //Once the user selects the directory and enters the folder name, a new folder is created using the mkdirs method of the File object.
//        JFileChooser fileChooser = new JFileChooser();
//        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        int option = fileChooser.showDialog(this, "Create");
//        if (option == JFileChooser.APPROVE_OPTION) {
//
//            // The File class is used to create a new folder with the specified name in the selected directory            
//            File newFolder = fileChooser.getSelectedFile();
//            //Retrieving just the name of the folder to be created (jtree)
//            String folderName = newFolder.getName();

        CreateNewProject Cnew = new CreateNewProject(this, true);
        Cnew.setLocationRelativeTo(null);
        Cnew.setVisible(true);

        File newprojectpath = new File(CreateNewProject.newprojectpath);

        if (!newprojectpath.exists()) {
            newprojectpath.mkdirs();
            DefaultMutableTreeNode folder = new DefaultMutableTreeNode(CreateNewProject.projectname); // Creating a node with the name of the folder
            mainRoot.add(folder); // adding the node to the main root 
            // Updating the project tree with the name of the folder (jtree)
            model = (DefaultTreeModel) jTree1.getModel(); // Retrieving the tree model so that it can be updated 
            model.setRoot(mainRoot); // Setting or replacing the main root of the tree model
            jTree1.setModel(model); // Setting the updated tree model back into the JTree component   

            // Displays the dialog to the user
            //QIn.setVisible(true);
        } else if (newprojectpath.exists()) {
            JOptionPane.showMessageDialog(null, "Folder already exists.");
        } else {
            System.out.println("Cancelled");
        }

        try {
            // building the path where you would like to download the text file 
            String fileName = "fastafiles.txt";
//            String npp = newprojectpath;
            String filePath = newprojectpath + File.separator + fileName;
//            System.out.println("Query: " + queryfilepath);
//            System.out.println("Project: " + newprojectpath);
//            System.out.println("File: " + filePath);

            //String filePath = "C:\\Users\\JiaYing\\GP\\try1\\fastafiles.txt";
            System.out.println(filePath);
            System.out.println(newprojectpath + File.separator + fileName);
            File file = new File(filePath);
            System.out.println(file.getAbsolutePath());

            if (!file.exists()) {
                file.createNewFile();
            }

            BufferedWriter writer = new BufferedWriter(new FileWriter(file));

            //String query = "C:\\Users\\JiaYing\\GP\\Ridaeus_Ras1_v1.0\\Ridaeus_Ras1_scaffolds_raw.fasta";
            //System.out.println(query);
            //System.out.println(queryfilepath);
            writer.write(CreateNewProject.queryfilename);
            writer.close();

            System.out.println("File written successfully");
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }

        Analysis.setEnabled(true);
        AddFileToProject.setEnabled(true);

//        NewProjectChrEst nextpage = new NewProjectChrEst(this, true);
//        nextpage.setLocationRelativeTo(null);
//        nextpage.setVisible(true);
        //Status Display on the main Frame
//        try {
//            // get the job ID from the submission
//            String jobId = CreateNewProject.jobIdChr;
//            System.out.println("Job submitted with ID: " + jobId);
//
//            //get the submission date
//            String submissionDate = CreateNewProject.submissionDateChr;
//            System.out.println(submissionDate);
//            status1.setText("Chromosome estimation With Job Id: " + jobId + " Submitted at Time: " + submissionDate);
//
//            // Check the status of the job
//            JobManager jobManagerChr = new JobManager("http://elvis.misc.cranfield.ac.uk/group2vm/estimate_chr/Ridaeus_Ras1_v1.fasta/ChrEst");
//            jobManagerChr.startJobStatusUpdates(jobId, status5);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }// End Status Display
        //Get the output Here
    }//GEN-LAST:event_NewProjectActionPerformed

    private void OpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenProjectActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // setting file chooser to only show directories
        int result = fileChooser.showOpenDialog(null); // showing the file chooser dialog

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFolder = fileChooser.getSelectedFile();
            existingFolderPath = selectedFolder.toString();
            String folderName = selectedFolder.getName(); // saving the name of the selected folder in a string variable

            // establishing the selected folder as the main folder in the project tree (first level)
            DefaultMutableTreeNode folder = new DefaultMutableTreeNode(folderName); // Creating a root with the name of the folder
            mainRoot.add(folder);

            // detecting if the main folder contains sub-folders (second level)   
            File[] subFolders = selectedFolder.listFiles(File::isDirectory);
            if (subFolders != null && subFolders.length > 0) {
                for (File subFolder : subFolders) {
                    DefaultMutableTreeNode subFoldernode = new DefaultMutableTreeNode(subFolder.getName()); // Creating the nodes with the names of the sub-folders
                    // adding the sub-folders as secondary nodes to the main folder (second level)
                    folder.add(subFoldernode);

                    // detecting if the sub-folders contain files 
                    File[] files = subFolder.listFiles();
                    if (files != null) {
                        for (File file : files) {
                            // adding the files as tertiary nodes to the sub-folders (third level)
                            subFoldernode.add(new DefaultMutableTreeNode(file.getName())); // adding and creating the nodes with the names of the files inside the sub-folders
                        }
                    }
                }

            } else {
                // detecting if the main folder contains files (second level)
                File[] files = selectedFolder.listFiles();
                if (files != null) {
                    for (File file : files) {
                        // adding the files as secondary nodes to the main folder (second level)
                        folder.add(new DefaultMutableTreeNode(file.getName()));
                    }
                }
            }

            // Updating the project tree 
            model = (DefaultTreeModel) jTree1.getModel(); // Retrieving the tree model so that it can be updated 
            model.setRoot(mainRoot); // Setting or replacing the main root of the tree model
            jTree1.setModel(model); // Setting the updated tree model back into the JTree component 
        }

        Analysis.setEnabled(true);
        AddFileToProject.setEnabled(true);
    }//GEN-LAST:event_OpenProjectActionPerformed

    private void SaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveProjectActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();
            if (!selectedDirectory.exists()) {
                selectedDirectory.mkdirs(); // Create the directory if it doesn't exist
            }
        }

    }//GEN-LAST:event_SaveProjectActionPerformed

    private void AnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalysisActionPerformed

    }//GEN-LAST:event_AnalysisActionPerformed

    private void HiCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HiCActionPerformed
        // Creates a new instance of the QueryFastaChrNoInputs class as a modal dialog, with this component as the parent
        // This dialog allows the user to input data for HiC, and must be completed before the program can continue
        HiCInputs h = new HiCInputs(this, true);
        // Displays the dialog to the user
        h.setLocationRelativeTo(null);
        h.setVisible(true);

        // Display the status of Hic Job
        try {
            // get the job ID from the submission
            String jobId = HiCInputs.jobIdHic;
            System.out.println("Job submitted with ID: " + jobId);

            //get the submission date
            String submissionDate = HiCInputs.submissionDateHic;
            System.out.println(submissionDate);
            activestatus.append("HiC with Job ID: " + jobId + " \t Submitted at Time: " + submissionDate + "\n");

            // Check the status of the job
            String runhttp = ServerConfigurationInputs.serverURL + "/plot_hic/" + HiCInputs.hicfilename + "/" + HiCInputs.assemblyfilename + "/Rid1/" + HiCInputs.selreso + "/" + CreateNewProject.numofchromosomes;
            JobManager jobManager = new JobManager();
            //runhttp);

            System.out.println(runhttp);

            jobManager.startJobStatusUpdates("hic", jobId, finishedstatus);
            for (int i = 1; i <= CreateNewProject.numofchromosomes; i++) {
                jobManager.checkJobStatusUpdates_image("hic", jobId, ServerConfigurationInputs.serverURL + "/download/Rid1_hicplot_chr" + i + ".png", CreateNewProject.newprojectpath);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }//End of Status display
//
//        try {
//            URL url = h.returnurl();
//            BufferedImage originalImage = ImageIO.read(url);
//            ImagePanel frame = new ImagePanel(originalImage) {
//            };
//            frame.setVisible(true);
////                @Override
////                public void mouseClicked(MouseEvent e) {
//////              throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mousePressed(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseEntered(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseExited(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseMoved(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseDragged(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseReleased(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////            };
////            try {
////                JPanel panel2 = new JPanel();
////                panel2.setLayout(new BorderLayout());
////                panel2.setName("Hi-C Map");
////                // JPanel panel2 = new JPanel();
////                panel2.setVisible(true);
////                // panel2.setVisible(true);
////                panel2.add(panels);
////                //panel2.add(panels);
////                jTabbedPane1.add(panel2);
////
////                JPanel options = new JPanel();
////                options.setLayout(new FlowLayout());
////                panel2.add(options, BorderLayout.NORTH);
////
////                JComboBox choosechrBox = new JComboBox();
////                choosechrBox.removeAllItems();
////                int Chr = CreateNewProject.numofchromosomes;
////                System.out.println(Chr);
////                //Create a String array of chromsome numbers according to the user input
////                String[] Chrnumbers = new String[Chr];
////                for (int i = 0; i < Chr; i++) {
////                    Chrnumbers[i] = Integer.toString(i + 1);
////                }
////                DefaultComboBoxModel aModel = new DefaultComboBoxModel(Chrnumbers);
////                choosechrBox.setModel(aModel);
////
////                JComboBox chooseresoBox = new JComboBox();
////                chooseresoBox.removeAllItems();
////                //Create a String array of chromsome numbers according to the user input
////                String[] resonumbers = {"250000", "100000"};
////                DefaultComboBoxModel bModel = new DefaultComboBoxModel(resonumbers);
////                chooseresoBox.setModel(bModel);
////
////                JLabel l = new JLabel();
////                JLabel l1 = new JLabel("Chromosome no.");
////                JLabel l2 = new JLabel("Resolution");
////                JButton rerun = new JButton("Rerun");
////                options.add(l1);
////                options.add(choosechrBox);
////                options.add(l2);
////                options.add(chooseresoBox);
////                options.add(rerun);
////
////            } catch (Exception exe) {
////                exe.printStackTrace();
////            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }

    }//GEN-LAST:event_HiCActionPerformed

    private void ConfigureServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigureServerActionPerformed
        // Creates a new instance of the QueryFastaChrNoInputs class as a modal dialog, with this component as the parent
        // This dialog allows the user to input data for server configuration, and must be completed before the program can continue
        ServerConfigurationInputs c = new ServerConfigurationInputs(this, true);
        // Displays the dialog to the user
        c.setLocationRelativeTo(null);
        c.setVisible(true);
    }//GEN-LAST:event_ConfigureServerActionPerformed

    private void GeneDensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneDensityActionPerformed
        // Creates a new instance of the GeneDensityInputs class as a modal dialog, with this component as the parent
        // This dialog allows the user to input data, and must be completed before the program can continue
        GeneDensityInputs GD = new GeneDensityInputs(this, true);
        // Displays the dialog to the user  
        GD.setLocationRelativeTo(null);
        GD.setVisible(true);

        try {
            // get the job ID from the submission
            String jobId = GeneDensityInputs.jobIdGd;
            System.out.println("Job submitted with ID: " + jobId);

            //get the submission date
            String submissionDate = GeneDensityInputs.submissionDateGd;
            System.out.println(submissionDate);
            activestatus.append("Gene Density with Job Id: " + jobId + " \t Submitted at Time: " + submissionDate + "\n");

            // Check the status of the job
            JobManager jobManager = new JobManager();
            //"http://elvis.misc.cranfield.ac.uk/group2vm/plot_gene_density/gfffiles-server.txt/fastafiles-server.txt/gene/1000000/2");
            jobManager.startJobStatusUpdates("density", jobId, finishedstatus);

        } catch (Exception e) {
            e.printStackTrace();
        }//End of Status dispaly

//        try {
//            URL url = GD.returnurl();
//            BufferedImage originalImage = ImageIO.read(url);
//            //JLabel label = new JLabel(new ImageIcon(originalImage));
//            ImagePanel frame = new ImagePanel(originalImage) {
//            };
//            frame.setVisible(true);
////                @Override
////                public void mouseClicked(MouseEvent e) {
//////              throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mousePressed(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseEntered(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseExited(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseMoved(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseDragged(MouseEvent e) {
////                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////
////                @Override
////                public void mouseReleased(MouseEvent e) {
////                    throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
////                }
////            };
////            try {
////
////                // Create a new JTabbedPane
////                JPanel panel3 = new JPanel();
////                panel3.setName("Genome Comparison + Hi-C + Gene Density");
////                // JPanel panel2 = new JPanel();
////                panel3.setVisible(true);
////                // panel2.setVisible(true);
////                panel3.add(panels);
////                //panel2.add(panels);
////                jTabbedPane1.add(panel3);
////
////            } catch (Exception exe) {
////                exe.printStackTrace();
////            }
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_GeneDensityActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
// mouse event of the project tree (to display existing files as tabbed panees)

        String fastaSuff = ".fasta";
        String gffSuff = ".gff";
        String txtSuff = ".txt";
        String pngSuff = ".png";

        // generating a node with the last component that was selected 
        node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        // generating a trimmed path of the selected folders
        int lastSeparator = existingFolderPath.lastIndexOf("\\");
        String trimmedFolderPath = existingFolderPath.substring(0, lastSeparator);
        System.out.println(lastSeparator);
        System.out.println(trimmedFolderPath);

        // retrieving the paths of the selected nodes 
        TreePath[] paths = jTree1.getSelectionPaths();
        if (paths != null) {
            for (TreePath path : paths) {
                // checking if the selected nodes are leaves 
                if (jTree1.getModel().isLeaf(path.getLastPathComponent())) {

                    // extracting the paths of the selected files
                    StringBuilder sb = new StringBuilder();
                    for (Object node : path.getPath()) {
                        sb.append(node.toString());
                        sb.append("/");
                    }

                    // generating the full paths of the selected files  
                    String fullPath = sb.toString();

                    System.out.println(fullPath);
                    fullPath = fullPath.substring(13, fullPath.length() - 1);
                    String finalPath = trimmedFolderPath.concat(fullPath);

                    System.out.println(finalPath);

                    String selectedFile = node.toString();

                    // for a text file 
                    if (selectedFile.contains(fastaSuff) || selectedFile.contains(gffSuff) || selectedFile.contains(txtSuff)) {

                        try {
                            FileReader reader = new FileReader(finalPath);
                            BufferedReader br = new BufferedReader(reader);
                            String line;
                            JTextArea textArea = new JTextArea();

                            while ((line = br.readLine()) != null) {
                                textArea.append(line + "\n");
                            }

                            //JScrollPane scrollPane = new JScrollPane(textArea);
                            JPanel panel9 = new JPanel();
                            panel9.setLayout(new BorderLayout());
                            panel9.add(textArea);
                            panel9.setName(selectedFile);
                            panel9.setVisible(true);
                            jTabbedPane1.add(panel9);

                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }

                        // for a png  
                    } else {
                        try {
                            File file = new File(finalPath);
                            BufferedImage image = ImageIO.read(file);
                            ImagePanel panels = new ImagePanel(image) {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mousePressed(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mouseEntered(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mouseExited(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mouseMoved(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mouseDragged(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }

                                @Override
                                public void mouseReleased(MouseEvent e) {
                                    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                                }
                            };

                            try {
                                JPanel panel4 = new JPanel();
                                panel4.setLayout(new BorderLayout());
                                panel4.setName(file.getName());
                                panel4.setVisible(true);
                                panel4.add(panels);
                                jTabbedPane1.add(panel4);
                            } catch (Exception exe) {
                                exe.printStackTrace();
                            }

                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }

                    }

                }
            }
        }
    }//GEN-LAST:event_jTree1MouseClicked

    private void CloseProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseProjectActionPerformed
        model.removeNodeFromParent((MutableTreeNode) node);

    }//GEN-LAST:event_CloseProjectActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if (jCheckBoxMenuItem1.isSelected()) {
            jPanel2.setVisible(true);
            jTree1.setVisible(true);
        } else {
            jPanel2.setVisible(false);
            jTree1.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        if (jCheckBoxMenuItem2.isSelected()) {
            statustab.setVisible(true);
        } else {
            statustab.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        if (jCheckBoxMenuItem3.isSelected()) {
            startpanel.setName("Start Page");
            startpanel.setVisible(true);
            startpanel.add(mainpage);
            jTabbedPane1.add(startpanel);
        } else {
            jTabbedPane1.remove(startpanel);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    private void AddFileToProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFileToProjectActionPerformed
        node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        mainRoot.add(node);

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            // moving the selected file to the new folder 
            if (CreateNewProject.newprojectpath != null) {
                System.out.println("is a new project destination");

                File destFolder = new File(CreateNewProject.newprojectpath);
                if (selectedFile.exists() && destFolder.isDirectory()) {
                    // constructing the destination file path by appending the source file name to the destination folder path
                    File destFile = new File(destFolder.getPath() + File.separator + selectedFile.getName());

                    // moving the file to the destination folder
                    if (selectedFile.renameTo(destFile)) {
                        System.out.println("File transferred successfully.");
                        node.add(new DefaultMutableTreeNode(selectedFile.getName()));

                    } else {
                        System.out.println("File transfer failed.");
                    }

                } else {
                    System.out.println("Source file does not exist or destination folder is not a directory.");
                }

                // moving the selected file to an existing folder     
            } else {
                System.out.println("its an existing project destination");

                // trimming the existing folder path 
                int lastSeparator = existingFolderPath.lastIndexOf("\\");
                String trimmedFolderPath = existingFolderPath.substring(0, lastSeparator);
                File folder = new File(trimmedFolderPath);
                // creating the destination folder path
                File destFolder = new File(folder.getPath() + File.separator + node.toString());

                if (selectedFile.exists() && destFolder.isDirectory()) {
                    // constructing the destination file path by appending the source file name to the destination folder path
                    File destFile = new File(destFolder.getPath() + File.separator + selectedFile.getName());

                    // moving the file to the destination folder
                    if (selectedFile.renameTo(destFile)) {
                        System.out.println("File transferred successfully.");
                        node.add(new DefaultMutableTreeNode(selectedFile.getName()));

                    } else {
                        System.out.println("File transfer failed.");
                    }

                } else {
                    System.out.println("Source file does not exist or destination folder is not a directory.");
                }
            }

            // Updating the project tree 
            model = (DefaultTreeModel) jTree1.getModel(); // Retrieving the tree model so that it can be updated 
            //model.nodesWereInserted(node, childIndices);
            model.setRoot(mainRoot); // Setting or replacing the main root of the tree model
            jTree1.setModel(model); // Setting the updated tree model back into the JTree component             

        }
    }//GEN-LAST:event_AddFileToProjectActionPerformed

    private void statsBUSCOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsBUSCOActionPerformed
        //Basic Stats from the server
//        Start Here: Job submission
        JobManager jobManagerStats = new JobManager();
        String jobId = null;
        //ServerConfigurationInputs.serverURL + "/calc_stats/" + CreateNewProject.queryfilename + "/Stats");

        try {
            // Submit a job and get the job ID
            List<String> jobInfo = jobManagerStats.submitJob(ServerConfigurationInputs.serverURL + "/calc_stats/" + CreateNewProject.queryfilename + "/" + CreateNewProject.queryfilename + "_Stats.txt");
            jobId = jobInfo.get(0);
            String submissionDate = jobInfo.get(1);

            //Display Job Submission ID and Time to the frame 
            activestatus.append("Basic Stats with Job ID: " + jobId + " \t Submitted at Time: " + submissionDate + "\n");

            // Check the status of the job, Display the status and Time whenfinished to the frame
            jobManagerStats.startJobStatusUpdates("stats", jobId, finishedstatus);
            jobManagerStats.checkJobStatusUpdates_text("stats", jobId, ServerConfigurationInputs.serverURL + "/download/" + CreateNewProject.queryfilename + "_Stats.txt", CreateNewProject.newprojectpath, jTabbedPane1);

        } catch (Exception e) {
            e.printStackTrace();
        }// End Job Submission
//
//        //Download the txt file of basic Stats
//        //Submit BUSCO job
//        //Start Here: Job submission
        JobManager jobManagerBUSCO = new JobManager();
        //ServerConfigurationInputs.serverURL + "/busco/" + CreateNewProject.queryfilename + "/eudicots_odb10/BUSCO/genome");
//
//        try {
//            // Submit a job and get the job ID
//            //http://elvis.misc.cranfield.ac.uk/group2vm/run/mkdir/uploads%2FKKKK
//            List<String> jobInfo1 = jobManagerBUSCO.submitJob(ServerConfigurationInputs.serverURL + "/run/mkdir/uploads%2F" );
//            List<String> jobInfo =  jobManagerBUSCO.submitJob(ServerConfigurationInputs.serverURL + "/busco/" + CreateNewProject.queryfilename + "/eudicots_odb10/BUSCO/genome");
//            String jobId = jobInfo.get(0);
//            String submissionDate = jobInfo.get(1);
//
//            //Display Job Submission ID and Time to the frame 
//            activestatus.setText("BUSCO with Job ID: " + jobId + " \t Submitted at Time: " + submissionDate + "\n");
//
//            // Check the status of the job, Display the status and Time whenfinished to the frame
        jobManagerBUSCO.startJobStatusUpdates("busco", jobId, finishedstatus);
        jobManagerBUSCO.checkJobStatusUpdates_image("busco", jobId, ServerConfigurationInputs.serverURL + "/download/BUSCO", CreateNewProject.newprojectpath);
        jobManagerBUSCO.checkJobStatusUpdates_nextsteps("busco", jobId, messagestatus, plotBUSCO);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }// End Job Submission
    }//GEN-LAST:event_statsBUSCOActionPerformed

    private void plotBUSCOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotBUSCOActionPerformed
        try {
            JobManager jobManagerBUSCO = new JobManager();
            List<String> jobInfo = jobManagerBUSCO.submitJob(ServerConfigurationInputs.serverURL + "/generate_plot/BUSCO");
            String jobId = jobInfo.get(0);
            String submissionDate = jobInfo.get(1);
            activestatus.append("BUSCO Plot with Job ID: " + jobId + " \t Submitted at Time: " + submissionDate + "\n");
            jobManagerBUSCO.startJobStatusUpdates("busco", jobId, finishedstatus);
            jobManagerBUSCO.checkJobStatusUpdates_image("busco", jobId, ServerConfigurationInputs.serverURL + "/download/idaeus_occi_chr4.png", CreateNewProject.newprojectpath);
        } catch (IOException ex) {
            Logger.getLogger(GroupPFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_plotBUSCOActionPerformed

    private void RunRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunRefActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("FASTA", "fa", "fasta");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showDialog(jPanel1, "Open");

        String reffilename = null;

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // save file path into a variable
            String reffile = selectedFile.getPath();
            reffilename = selectedFile.getName();

            if (reffilename.contains(".fasta")) {
                reffilename2 = reffilename.substring(0, reffilename.length() - 6);
            } else {
                reffilename2 = reffilename.substring(0, reffilename.length() - 3);
            }

            System.out.println(reffilename2);
        }

        try {
            String filePath = CreateNewProject.newprojectpath + File.separator + "fastafiles.txt";
            System.out.println(filePath);
            File file = new File(filePath);
            System.out.println(file.getAbsolutePath());

            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            writer.append(reffilename);
            writer.close();

            System.out.println("File written successfully");
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }

        // RUN NUCMER
        //Start Here: Job submission 1 nucmer job
        JobManager jobManagerNc = new JobManager();
        //"http://elvis.misc.cranfield.ac.uk/group2vm/nucmer/tests4/Anitra1161Contigs.fasta/Ridaeus_Ras1_v1.fasta");

        try {
            // Submit a job and get the job ID
            String submiturl = ServerConfigurationInputs.serverURL + "/nucmer/nucmer_output/" + reffilename + "/" + CreateNewProject.queryfilename;
            List<String> jobInfo = jobManagerNc.submitJob(submiturl);
            String jobIdNc = jobInfo.get(0);
            String submissionDateNc = jobInfo.get(1);
            //Display Job Submission ID and Time to the frame 
            activestatus.append("Genome Comparison using Reference file with Job ID: " + jobIdNc + " \t Submitted at Time: " + submissionDateNc + "\n");
            System.out.println("Job submitted with ID: " + jobIdNc);
//            // add expected delta file name to text file
////            try {
////                String fileName = ".delta.txt";
////                String filePath = CreateNewProject.newprojectpath + File.separator + fileName;
////                File file = new File(filePath);
////                System.out.println(file.getAbsolutePath());
////
////                if (!file.exists()) {
////                    file.createNewFile();
////                }
////
////                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
////                writer.write("output_nucmer.delta");
////                writer.close();
////
////                System.out.println("File written successfully");
////            } catch (IOException e) {
////                System.out.println("Error writing to file: " + e.getMessage());
////            }
//
            // Check for job updates
            jobManagerNc.startJobStatusUpdates("nucmer", jobIdNc, finishedstatus);
            jobManagerNc.checkJobStatusUpdates_nextsteps("nucmer", jobIdNc, messagestatus, null);

        } catch (Exception e) {
            e.printStackTrace();
        }

        nucmerran = true;

        System.out.println(nucmerran);
    }//GEN-LAST:event_RunRefActionPerformed

    private void RunDeltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunDeltaActionPerformed
        GenomeCompInputs gc = new GenomeCompInputs(this, true);
        gc.setLocationRelativeTo(null);
        gc.setVisible(true);

        //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --- 
        //Job submission 2 Delta filter
        JobManager jobManagerDf = new JobManager();
        try {
            // Submit a job and get the job ID
            System.out.println(GenomeCompInputs.submitdfurl);
            List<String> jobInfo = jobManagerDf.submitJob(GenomeCompInputs.submitdfurl);
            String jobIdDf = jobInfo.get(0);
            String submissionDateDf = jobInfo.get(1);
            activestatus.append("Delta Filter with Job ID: " + jobIdDf + " \t Submitted at Time: " + submissionDateDf + "\n");
            System.out.println("Job submitted with ID: " + jobIdDf);
            jobManagerDf.startJobStatusUpdates("delta", jobIdDf, finishedstatus);
            jobManagerDf.checkJobStatusUpdates_nextsteps("delta", jobIdDf, messagestatus, RunMummer);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_RunDeltaActionPerformed

    private void RunMummerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunMummerActionPerformed
        // Job 3 Status:Display the status of mummer plot
        JobManager jobManagerMp = new JobManager();
        try {
            // Submit a job and get the job ID
            System.out.println(GenomeCompInputs.submitmpurl);
            List<String> jobInfo = jobManagerMp.submitJob(GenomeCompInputs.submitmpurl);
            String jobIdMp = jobInfo.get(0);
            String submissionDateMp = jobInfo.get(1);
            activestatus.append("Comparison Plot with Job ID: " + jobIdMp + " \t Submitted at Time: " + submissionDateMp + "\n");
            System.out.println("Job submitted with ID: " + jobIdMp);

            jobManagerMp.startJobStatusUpdates("mummer", jobIdMp, finishedstatus);
            jobManagerMp.checkJobStatusUpdates_image("mummer", jobIdMp, GenomeCompInputs.downloadmpurl, CreateNewProject.newprojectpath);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_RunMummerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroupPFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroupPFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroupPFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroupPFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroupPFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddFileToProject;
    private static javax.swing.JMenu Analysis;
    private javax.swing.JMenuItem CloseProject;
    private javax.swing.JMenuItem ConfigureServer;
    private javax.swing.JMenuItem GeneDensity;
    private javax.swing.JMenuItem HiC;
    private static javax.swing.JMenuItem NewProject;
    private javax.swing.JMenuItem OpenProject;
    private javax.swing.JMenu Project;
    private javax.swing.JMenuItem RunDelta;
    private javax.swing.JMenuItem RunMummer;
    private javax.swing.JMenuItem RunRef;
    private javax.swing.JMenuItem SaveProject;
    private javax.swing.JMenuItem SaveProjectas;
    private javax.swing.JMenu Server;
    private javax.swing.JMenu View;
    private javax.swing.JTextArea activestatus;
    private javax.swing.JTextArea finishedstatus;
    private javax.swing.JTextArea incompletestatus;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextArea messagestatus;
    private javax.swing.JMenuItem plotBUSCO;
    private javax.swing.JMenuItem statsBUSCO;
    private javax.swing.JTabbedPane statustab;
    // End of variables declaration//GEN-END:variables
}
